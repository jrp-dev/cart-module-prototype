import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { cartItemsState } from '../../types/cartTypes';
import { fetchCart } from './cartAPI';

const initialState: {value: cartItemsState[], total: number} = {
  value: [],
  total: 0
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getCartAsync = createAsyncThunk(
  'cart/fetchCart',
  async () => {    
    const response = await fetchCart();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

const getTotal = (value: cartItemsState[]) => {
  return value.map(x => x.price * x.quantity).reduce((a: number, b:number) => a + b, 0)
}

export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes      
      state.value = state.value.map(cart_item => {
        if (cart_item.id === action.payload.id) {
          cart_item.quantity += 1
        }
        return cart_item
      })
      state.total = getTotal(state.value)
    },
    decrement: (state, action) => {
      state.value = state.value.map(cart_item => {
        if (cart_item.id === action.payload.id && cart_item.quantity > 1) {
          cart_item.quantity -= 1
        }
        return cart_item
      })
      state.total = getTotal(state.value)
    },
    remove: (state, action) => {
      state.value = state.value.filter(cart_item => cart_item.id !== action.payload.id)
      state.total = getTotal(state.value)
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCartAsync.pending, (state) => {
        // state.status = 'loading';
      })
      .addCase(getCartAsync.fulfilled, (state, action) => {
        state.value = action.payload
        state.total = getTotal(state.value)
      })
      .addCase(getCartAsync.rejected, (state) => {
        // state.status = 'failed';
      });
  },
});

export const { increment, decrement, remove } = cartSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCart = (state: RootState) => state.cart.value;
export const cartTotal = (state: RootState) => state.cart.total;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default cartSlice.reducer;
